/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <ns>
#include <engine>

#define PLUGIN "WhichBotControl"
#define VERSION "1.0"
#define AUTHOR "Masked Carrot"

//*** Commands ***
// 
//****** Admin console commands ******
// 
// wbc_addabot		- adds a bot anonymously.
// wbc_kickabot		- kicks a bot anonymously.
// wbc_kickallbots	- kicks all bots anonymously.
// wbc_balance <0/1>	- turns bot balance on or off. 
//			Note: Using the add and kick commands automatically turns off balance.
// wbc_evolve <off,lifeform> - force all bots to evolve to chosen lifeform.
// wbc_boost		- Manually give the bots an xp/res boost.
// wbc_autoboost <on/off> - Turns autoboost on or off.
//
//****** Chat commands  Available to all when enabled******
//
// /addabot		- adds a bot
// /kickabot		- kicks a bot
// /kickallbots		- kicks all bots
//
// Note: For non-Admins these commands only work if there is no Admin playing.

//*** CVAR Explanations.***
//
// wbc_time_between_votes	- Time in seconds before another vote is allowed to occur.
// wbc_allowed_chat_cmds	- Determines what chat commands are available to players.
//				0 - none
//				1 - addabot
//				2 - kickabot
//				4 - kickallbots
//		
//				Add these values together to get the desired combintion of commands.
//				Example: 1+2+4 = 7, would enable all commands.
//
// wbc_autoboost_state		- Is autoboost on or off, 0 = off, 1= on
// wbc_autoboost_freq		- How often, in minutes, to give the bots a boost.
// wbc_co_boost_amt		- Amount of levels to boost bots during co maps.
// wbc_ns_boost_amt		- Amount res points to boost bots during ns maps. 
// wbc_autoboost_gametype	- Gametype to use boost with. ns,combat, or both
// wbc_max_team_diff		- How many extra alien players (bots and ppl) there can be.
//				Bots can't be added after this is reached.
//				Note: if mp_limitteams is set to higher number,
//				that number will be used instead.
//
//*** Default cvar values used on server startup.
// Note: These can be overidden by placing the above cvars in the userconfig.cfg

#define DEFAULT_TIME_BETWEEN_VOTES 	"120.0"
#define DEFAULT_ALLOWED_CHAT_CMDS	"7"
#define DEFAULT_AUTOBOOST_STATE		"1"
#define DEFAULT_AUTOBOOST_FREQUENCY	"2.0"
#define DEFAULT_CO_BOOST_AMT		"1.0"
#define DEFAULT_NS_BOOST_AMT		"10.0"
#define DEFAULT_AUTOBOOST_GAMETYPE	"both"
#define DEFAULT_MAX_TEAM_DIFF		"5"

// Don't touch below here unless you know what you're doing.
#define MAX_LEVELS		49
enum{
	TASK_ID_VOTE = 0,
	TASK_ID_BOTKICK ,	
	TASK_ID_RESET_TEAM_LIMITS ,
	TASK_ID_AUTOBOOST,	
	TASK_COUNT
}
	
new gMaxTeamDiff = 0
new gLimitTeams = 0
new gLastVoteTime = 0
new Float:gCombatLevels[MAX_LEVELS+1]
new gVoteResults[3] = {0,0,0}
new gVoteKeys = MENU_KEY_0 | MENU_KEY_1 | MENU_KEY_2
enum 	{voteadd = 0,
	votekick,
	votekickall
	}
	
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	// Admin console commands
	register_concmd("wbc_addabot","cmd_wbc_addabot",ADMIN_KICK,"<add a bots>")
	register_concmd("wbc_kickabot","cmd_wbc_kickabot",ADMIN_KICK,"<kick a bots>")
	register_concmd("wbc_kickallbots","cmd_wbc_kickallbots",ADMIN_KICK,"<kick all bots")
	register_concmd("wbc_balance","cmd_balance",ADMIN_KICK,"<Balance 0/1 (off/on)>")
	register_concmd("wbc_evolve","cmd_evolve",ADMIN_KICK,"<class (gorge,lerk,fade,onos,off)>")
	register_concmd("wbc_boost","cmd_wbc_boost",ADMIN_KICK,"<boost bots lvl>")
	register_concmd("wbc_autoboost","cmd_autoboost",ADMIN_KICK,"<on/off>")
	
	// Chat commands
	register_clcmd ("say /addabot","cmd_addabot",ADMIN_ALL,"Adds a bot")
	register_clcmd ("say /kickabot","cmd_kickabot",ADMIN_ALL,"Removes a bot")
	register_clcmd ("say /kickallbots","cmd_kickallbots",ADMIN_ALL,"Remove all bots")

	// Autoboost related cvars
	register_cvar("wbc_autoboost_state",DEFAULT_AUTOBOOST_STATE,FCVAR_SPONLY)
	register_cvar("wbc_co_boost_amt",DEFAULT_CO_BOOST_AMT, FCVAR_SPONLY)
	register_cvar("wbc_ns_boost_amt", DEFAULT_NS_BOOST_AMT, FCVAR_SPONLY)
	register_cvar("wbc_autoboost_freq",DEFAULT_AUTOBOOST_FREQUENCY, FCVAR_SPONLY)
	register_cvar("wbc_autoboost_gametype",DEFAULT_AUTOBOOST_GAMETYPE,FCVAR_SPONLY)
	//misc cvars
	register_cvar("wbc_time_between_votes",DEFAULT_TIME_BETWEEN_VOTES,FCVAR_SPONLY)
	register_cvar("wbc_allowed_chat_cmds",DEFAULT_ALLOWED_CHAT_CMDS,FCVAR_SPONLY)
	register_cvar("wbc_max_team_diff",DEFAULT_MAX_TEAM_DIFF,FCVAR_SPONLY)	
		
	// Vote menus
	register_menucmd (register_menuid("Add a Bot?"),gVoteKeys,"handleBotVote")
	register_menucmd (register_menuid("Kick a Bot?"),gVoteKeys,"handleBotVote")
	register_menucmd (register_menuid("Kick all Bots?"),gVoteKeys,"handleBotVote")
	
	// Events
	register_event("Countdown", "init_autoboost", "a")
	register_event("GameStatus", "end_autoboost", "a")
}
public plugin_cfg(){
	gLimitTeams = get_cvar_num("mp_limitteams")
	gMaxTeamDiff = get_cvar_num("wbc_max_team_diff")
	if (gLimitTeams > gMaxTeamDiff) gMaxTeamDiff = gLimitTeams
	if (gLimitTeams == 0) gMaxTeamDiff = get_cvar_num("maxplayers")
	// Calculate the xp needed for 50 levels of combat
	// This is based on info from the latejoin plugin.
	// TODO: Test for myself to see if this is correct.
	gCombatLevels[0]=0.0
	for (new i=0;i<MAX_LEVELS;i++)
	{
		gCombatLevels[i+1]= gCombatLevels[i]+100.0+(50.0 * i)
	}
}
stock AdminIsPlaying()
{
	//Purpose: Check to see if there any admins on the server and if they're playing.
	//Return true if yes, false if no.
	new players[32],num,i
	get_players (players,num,"c")	// Get all non-bot players.
	for (i=0;i<num;i++)
	{
		if (is_user_admin(players[i])  && entity_get_int(players[i],EV_INT_team)) return true
	}
	return false
}

stock numAlienBots()
{
	//Purpose: return number of bots playing on alien team.
	new bots[32],num,aliens,i
	get_players(bots,num,"d") // "d" - return only bots
	aliens=0
	for (i=0;i<num;i++)
	{
		if (entity_get_int(bots[i],EV_INT_team) == 2 || entity_get_int(bots[i],EV_INT_team) == 4)
			aliens++
	}
	return num 
}
stock numAliens()
{
	//Purpose: return number of players (ppl and bots) on the alien team.
	new players[32],num,aliens,i
	get_players(players,num)
	aliens=0
	for (i=0;i<num;i++)
	{
		if (entity_get_int(players[i],EV_INT_team) == 2 || entity_get_int(players[i],EV_INT_team) == 4)
		{
			aliens++
		}
	}

	return aliens
}

stock numMarines()
{
	//Purpose: Return number of players on the marine team.
	new players[32],num,marines,i
	get_players(players,num)
	for (i=0;i<num;i++)
	{
		if (entity_get_int(players[i],EV_INT_team) == 1 || entity_get_int(players[i],EV_INT_team) == 3)
		{
			marines++
		}
	}

	return marines
}
stock ActivePlayers()
{
	//Purpose: return the number of  ppl(notbots) actually playing (i.e., not spectating or in readyroom.)
	new players[32],num ,i
	new activePlayers = 0
	get_players(players,num,"c") //"c" - return players that are not bots
	if (num < 2) return false
	for (i=0;i<num;i++)
	{
		if (entity_get_int(players[i],EV_INT_team)) activePlayers++
	}
	return activePlayers 
}
stock canUseCommand(pid,kick=false)
{
	if (!entity_get_int(pid,EV_INT_team))
	{
		client_print(pid,print_chat,"Command disabled: You must be playing to use this command.")
		return false
	}
	else if (AdminIsPlaying())
	{
		client_print(pid,print_chat,"Command disabled: Admin playing.")
		return false
	}
	else if (reachedTeamLimit() && !kick)
	{
		client_print(pid,print_chat,"Command disabled: Too many players on alien team.")
		return false
	}
	return true
}
stock showMenu(const menu[])
{
	new players[32],num,i
	get_players(players,num,"c")
	for (i=0;i<num;i++)
	{
		if (entity_get_int(players[i],EV_INT_team))
			show_menu(players[i],gVoteKeys,menu,15)
	}
}
public reachedTeamLimit()
{
	new answer = gLimitTeams
	if (answer)
	{
		answer = (numAliens()-numMarines() > gMaxTeamDiff)?  true: false
	}
	return answer
	
}
public cmd_addabot(id)
{
	if (!is_user_admin(id)) 
	{
		if (!(get_cvar_num("wbc_allowed_chat_cmds")&1)||!canUseCommand(id)  )
		{
			return PLUGIN_HANDLED
		}
		else if (ActivePlayers()-1 > 0) //If others are playing ,force a vote.
		{
			client_print(id,print_chat,"Other players on server: Initiating vote...")
			voteaddabot(id)
			return PLUGIN_HANDLED
		}
	}
	addabot()
	return PLUGIN_HANDLED		
}
public cmd_kickabot(id)
{
	if (task_exists(TASK_ID_BOTKICK)) return PLUGIN_HANDLED // Don't kick while kickall is working.
	if (!is_user_admin(id))
	{
		if (!(get_cvar_num("wbc_allowed_chat_cmds")&2) || !canUseCommand(id,true) )
		{
			return PLUGIN_HANDLED
		}
		else if (ActivePlayers()-1 > 0)
		{
			client_print(id,print_chat,"Other people playing: Initiating vote...")
			votekickabot(id)
			return PLUGIN_HANDLED
		}
	}
	kickabot()
	
	return PLUGIN_HANDLED	
}
public cmd_kickallbots(id)
{
	if (id && !is_user_admin(id))	//Admins can always use this.
	{
		
		if (!(get_cvar_num("wbc_allowed_chat_cmds")&4) || !canUseCommand(id,true) )
		{
			return PLUGIN_HANDLED
		}
		else if (ActivePlayers()-1 > 0)
		{
			client_print(id,print_chat,"Other people playing: Initiating vote...")
			votekickallbots(id)
			return PLUGIN_HANDLED
		}
	}
	if (task_exists(TASK_ID_BOTKICK)) remove_task(TASK_ID_BOTKICK)
	
	//Note: This will try to kick more bots than we want if the server is running other bot plugins (i.e,rc_bots),
	// and those bots are also on the alien team. That shouldn't cause any problems.
	set_task(0.5,"kickabot",TASK_ID_BOTKICK,"",0,"a",numAlienBots())	
	
	return PLUGIN_HANDLED
}
public isEnoughTimeBetweenVotes(pid)
{
	new currentTime = get_systime()
	new timeElapsed = currentTime - gLastVoteTime
	if (timeElapsed < get_cvar_float("wbc_time_between_votes"))
	{
		client_print(pid,print_chat,"Voting disabled: Need more time between votes.")
		return false
	}
	gLastVoteTime = currentTime
	return true
}
public voteaddabot(id)
{
	if (isEnoughTimeBetweenVotes(id))
	{
		new menu[192]
		new vote[1]
		vote[0] = voteadd
		format(menu,191,"Add a Bot?^n^n1. Yes^n2. No^n3. Don't Care")
		showMenu(menu)
		set_task(16.0,"checkVotes",TASK_ID_VOTE,vote,1)
	}
	return
}
public votekickabot(id)
{
	if (isEnoughTimeBetweenVotes(id))
	{
		new menu[192]
		new vote[1]
		format(menu,191,"Kick a Bot?^n^n1. Yes^n2. No^n3. Don't Care")
		showMenu(menu)
		vote[0] = votekick
		set_task(16.0,"checkVotes",TASK_ID_VOTE,vote,1)
	}
	return
}
public votekickallbots(id)
{
	if(isEnoughTimeBetweenVotes(id))
	{
		new menu[192]
		new vote[1]
		format(menu,191,"Kick all Bots?^n^n1. Yes^n2. No^n3. Don't Care")
		showMenu(menu)
		vote[0]= votekickall
		set_task(16.0,"checkVotes",TASK_ID_VOTE,vote,1)
	}
	return
}
public handleBotVote(id,key)
{
//This is basically stolen from amx mapchooser.sma
	if (get_cvar_float("amx_vote_answers"))
	{
		new name[32]
		get_user_name(id,name,31)
		if (key == 0)
			client_print(0,print_chat,"%s voted yes.",name)
		else if (key == 1)
			client_print(0,print_chat,"%s voted no.",name)
		else if (key == 2)
			client_print(0,print_chat,"%s Doesn't care.",name)
	}
	++gVoteResults[key]
	return PLUGIN_HANDLED
}
public checkVotes(vote[])
{
	new msg[50]
	format(msg,49,"%d Yes Votes, %d No Votes, and %d Voted Don't care.",gVoteResults[0],gVoteResults[1],gVoteResults[2])
	client_print(0,print_chat,msg)
	if(gVoteResults[0] > gVoteResults[1])
	{
		switch(vote[0])
		{
			case voteadd:
			{
				client_print(0,print_chat,"Vote succeeded,adding a bot.")
				addabot()
			}
			case votekick:
			{
				client_print(0,print_chat,"Vote succeeded, Kicking a bot.")
				kickabot()
			}
			case votekickall:
			{
				client_print(0,print_chat,"Vote succeeded ,kicking all bots.")
				if (task_exists(1)) remove_task(1)
				set_task(0.5,"kickabot",TASK_ID_BOTKICK,"",0,"a",numAlienBots())
			}
		}
	}
	else
	{
		client_print(0,print_chat,"Vote failed.")
	}
	gVoteResults[0] = 0
	gVoteResults[1] = 0
	gVoteResults[2] = 0
	return PLUGIN_CONTINUE

}
public cmd_wbc_addabot(id,level,cid)
{
	if (!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	addabot()
	return PLUGIN_HANDLED
}
public addabot()
{
	
	set_cvar_num("mp_limitteams",gMaxTeamDiff)
	server_cmd("wb balance off")	//Must turn balance off or bots will leave as soon as they're added.
	server_cmd("wb add")
	set_task(1.0,"resetLimitteams",TASK_ID_RESET_TEAM_LIMITS) // Reset team limits after bots have had a chance to join.
	
}
public cmd_wbc_kickabot(id,level,cid)
{
	if (!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	kickabot()
	return PLUGIN_HANDLED
}
public cmd_wbc_kickallbots(id,level,cid)
{
	if (!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	cmd_kickallbots(id)
	return PLUGIN_HANDLED
}
public kickabot()
{
	server_cmd("wb balance off")
	server_cmd("wb remove")
}
public resetLimitteams()
{
	set_cvar_num("mp_limitteams",gLimitTeams)
}

public cmd_autoboost(id,level,cid)
{
	//Purpose: handle console commands
	if (!cmd_access(id,level,cid,2)) return PLUGIN_HANDLED
	
	new Arg[4]
	read_argv(1,Arg,3)
	if (equali(Arg,"on"))
	{
		console_print(id,"Setting autoboost")
		if(task_exists(TASK_ID_AUTOBOOST))
		{
			console_print(id,"Autoboost already running.")
			return PLUGIN_HANDLED
		}
		else
		{
			console_print(id,"Starting autoboost.")
			new Float:freq =get_cvar_float("wbc_autoboost_freq")
			set_task((freq *60.0),"auto_boost",TASK_ID_AUTOBOOST,"",0,"b")	
		}
	}
	else if(equali(Arg,"off"))
	{
		if(task_exists(TASK_ID_AUTOBOOST))
		{
			console_print(id,"Autoboost is now off.")
			remove_task(TASK_ID_AUTOBOOST)
		}
		else
		{
			console_print(id,"Autoboost is already off.")
		}
	}
	return PLUGIN_HANDLED
}
public init_autoboost()
{
	//This function is called when round starts.
	//This is where we start our timer.
	new autoboost=get_cvar_num("wbc_autoboost_state")
	if (!autoboost) return PLUGIN_HANDLED
	console_print(0,"Starting autoboost.")
	new Float:freq = get_cvar_float("wbc_autoboost_freq")
	set_task((freq*60.0),"auto_boost",TASK_ID_AUTOBOOST,"",0,"b")		
	return PLUGIN_HANDLED
}
public cmd_wbc_boost(id,level,cid)
{
	if (!cmd_access(id,level,cid,1))
	{
		return PLUGIN_HANDLED
	}
	auto_boost()
	return PLUGIN_HANDLED
}
public auto_boost()
{
	if (!get_cvar_num("wbc_autoboost_state"))
	{
		if (task_exists(TASK_ID_AUTOBOOST))
		{
			remove_task(TASK_ID_AUTOBOOST)
		}
		return PLUGIN_HANDLED
	}
	new bot[32]
	new botcount = 0
	get_players(bot,botcount,"d") 	//"d" means return bots only
	if(!botcount) return PLUGIN_HANDLED //No bots to boost
	
	console_print(0,"Autoboosting")
		
	new gametype[7]

	//get_cvar_string("wbc_autoboost_amt",amount,2)
	get_cvar_string("wbc_autoboost_gametype",gametype,6)
	
	if (equal(gametype,"both"))
	{
		// Since whichbots wb boost command doesn't work we use this ugly hack.
		for (new i=0;i<botcount;i++)
		{
			
			if (ns_is_combat())
			{
				new Float:xp = ns_get_exp(bot[i])
				new Float:pointsForLevel
				new level = 0
				for (new i=MAX_LEVELS;i>=0;--i)
				{
					if (xp >= gCombatLevels[i])
					{
						level = i
						break
					}
				}
				if (level < 49)
				{
					pointsForLevel = gCombatLevels[level+1] - gCombatLevels[level]
				}
				
				xp += (pointsForLevel * get_cvar_float("wbc_co_boost_amt"))+1
				if (xp > gCombatLevels[MAX_LEVELS]) xp = gCombatLevels[MAX_LEVELS]
				ns_set_exp(bot[i],xp)
			}
			else 
			{
				new Float:res =ns_get_res(bot[i])
				res += get_cvar_float("wbc_ns_boost_amt")
				if (res>100.0) res=100.0
				ns_set_res(bot[i],res)
			}
		}
		//client_print(0,print_chat,"Warning: Bots Increased 1 or more levels.")
	}
	else if(ns_is_combat() && equal(gametype,"combat"))
	{
		for (new i=0;i<botcount;i++)
		{
			new Float:xp = ns_get_exp(bot[i])
			new Float:pointsForLevel
			new level = 0
			for (new i=MAX_LEVELS;i>=0;--i)
			{
				if (xp >= gCombatLevels[i])
				{
					level = i
					break
				}
			}
			if (level < 49)
			{
				pointsForLevel = gCombatLevels[level+1] - gCombatLevels[level]
			}
				
			xp += pointsForLevel * get_cvar_float("wbc_co_boost_amt")
			if (xp > gCombatLevels[MAX_LEVELS]) xp = gCombatLevels[MAX_LEVELS]
			ns_set_exp(bot[i],xp)
		}
		//client_print(0,print_chat,"Warning: Bots Increased 1 or more levels.")
	}
	else if(!ns_is_combat() && equal(gametype,"ns"))
	{
		for (new i=0;i<botcount;i++)
		{
			new Float:res = ns_get_res(bot[i])
			res += get_cvar_float("wbc_ns_boost_amt")
			if (res>100) res=100.0
			ns_set_res(bot[i],res)
		}
		//client_print(0,print_chat,"Warning: Bots Increased 1 or more levels.")
	}
	return PLUGIN_HANDLED
}
public end_autoboost()
{
	//This function checks to see if round has ended.
	//If it has and timer is still going stop it.
	new data = read_data( 1)

	if (data == 2)
	{
		
		console_print(0,"round ended.")
		for (new i = 0;i < TASK_COUNT;i++)
		{
			if (task_exists(i))
			{
				remove_task(i)
			}
		}
		server_cmd("wb balance on")
		server_cmd("wb evolve off")
		console_print(0,"Autoboost stopped")
	}
	return PLUGIN_HANDLED
}
public plugin_end()
{
	new i
	for (i=0;i<TASK_COUNT;i++)
	{
		if (task_exists(i))
		{
			remove_task(i)
		}
	}
}
// Note: The following code was appropriated from wbadmin.
public cmd_balance(id,level,cid) {		//Enable or disable teambalance 
	if (!cmd_access(id,level,cid,2))
		return PLUGIN_HANDLED

	new balance[4]
	read_argv(1,balance,3)
	
	if (equal(balance,"1") || equal(balance,"on")) {
		server_cmd("wb balance on")
		client_print(0,print_chat,"Whichbot Balance On")
	}
	else {
		server_cmd("wb balance off")
		client_print(0,print_chat,"Whichbot Balance Off")
	}
	
	return PLUGIN_HANDLED
}

public cmd_evolve(id,level,cid) {			//Set bot Class Type
	if (!cmd_access(id,level,cid,2))
		return PLUGIN_HANDLED

	new class[8]
	read_argv(1,class,7)
	
	if (equal(class,"skulk")) {
		server_cmd("wb evolve skulk")
		client_print(0,print_chat,"Attack of the cloakers")
		return PLUGIN_HANDLED
	}
	if (equal(class,"gorge")) {
		server_cmd("wb evolve gorge")
		client_print(0,print_chat,"Gorge Just Wanna Have Fun")
		return PLUGIN_HANDLED
	}
	if (equal(class,"lerk")) {
		server_cmd("wb evolve lerk")
		client_print(0,print_chat,"Invasion Of The Flying Rats!!!")
		return PLUGIN_HANDLED
	}
	if (equal(class,"fade")) {
		server_cmd("wb evolve fade")
		client_print(0,print_chat,"We are the fade, resistence is Futile...")
		return PLUGIN_HANDLED
	}
	if (equal(class,"onos")) {
		server_cmd("wb evolve onos")
		client_print(0,print_chat,"I'm Big, You know it, Now Die!!!")
		return PLUGIN_HANDLED
	}
	else {
		server_cmd("wb evolve off")
		client_print(0,print_chat,"I love Freedom of Choice")
		return PLUGIN_HANDLED
	}
	
	return PLUGIN_HANDLED
}


	
	
